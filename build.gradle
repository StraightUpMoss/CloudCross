plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = '0.0.1-1.20.2'
group = "net.liam.cloudcross"

configurations {
    shade
    implementation.extendsFrom shade
}
base {
    archivesName = 'cloudcross'
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {

    mappings channel: mapping_channel, version: mapping_version


    copyIdeResources = true


    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    // flatDir {
    //     dir 'libs'
    // }
}


 dependencies {
    //compile 'com.google.api-client:google-api-client:1.32.1'
    shade 'com.google.api-client:google-api-client:2.0.0'
    shade 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
    shade 'com.google.apis:google-api-services-drive:v3-rev20220815-2.0.0'
    shade 'com.google.http-client:google-http-client:1.32.2'
    shade 'com.google.oauth-client:google-oauth-client:1.34.1'
    //implementation ''

    // Specify the version of Minecraft to use.
    // Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
    // The "userdev" classifier will be requested and setup by ForgeGradle.
    // If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
    // then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
    minecraft "net.minecraftforge:forge:1.20.2-48.1.0"
//    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

}
jar {
    archiveClassifier = 'slim'
    manifest {
        attributes('Main-Class' : 'net.liam.CloudCross.CloudCrossDriveManager')
    }
}
shadowJar {
    //duplicatesStrategy = DuplicatesStrategy.INHERIT
    archiveClassifier = ''
    configurations = [project.configurations.shade]
    relocate 'com.google.api-client:google-api-client:2.0.0', 'crosscloud.relocated.com.google.api-client:google-api-client:2.0.0'
    relocate 'com.google.oauth-client:google-oauth-client-jetty:1.34.1', 'crosscloud.relocated.com.google.oauth-client:google-oauth-client-jetty:1.34.1'
    relocate 'com.google.apis:google-api-services-drive:v3-rev20220815-2.0.0', 'crosscloud.relocated.com.google.apis:google-api-services-drive:v3-rev20220815-2.0.0'
    relocate 'com.google.http-client:google-http-client:1.32.2', 'crosscloud.relocated.com.google.http-client:google-http-client:1.32.2'
    relocate 'com.google.oauth-client:google-oauth-client:1.34.1', 'crosscloud.relocated.com.google.oauth-client:google-oauth-client:1.34.1'
    finalizedBy 'reobfShadowJar'
}
assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}
// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
//tasks.named('publish').configure {
    // dependsOn 'reobfJar'
//}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
